!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
FUSE_USE_VERSION	tagsistant.h	127;"	d
IS_VALID_RELATION	path_resolution.h	51;"	d
O_NOATIME	tagsistant.h	339;"	d
PLUGINS_DIR	tagsistant.h	111;"	d
PLUGIN_EXT	plugin.c	522;"	d	file:
QTREES_ARE_SIMILAR	path_resolution.h	164;"	d
QTREE_IS_ALIAS	path_resolution.h	136;"	d
QTREE_IS_ARCHIVE	path_resolution.h	131;"	d
QTREE_IS_COMPLETE	path_resolution.h	155;"	d
QTREE_IS_EXTERNAL	path_resolution.h	156;"	d
QTREE_IS_INTERNAL	path_resolution.h	157;"	d
QTREE_IS_MALFORMED	path_resolution.h	128;"	d
QTREE_IS_RELATIONS	path_resolution.h	132;"	d
QTREE_IS_RETAG	path_resolution.h	134;"	d
QTREE_IS_ROOT	path_resolution.h	129;"	d
QTREE_IS_STATS	path_resolution.h	133;"	d
QTREE_IS_STORE	path_resolution.h	135;"	d
QTREE_IS_TAGGABLE	path_resolution.h	154;"	d
QTREE_IS_TAGS	path_resolution.h	130;"	d
QTREE_POINTS_TO_OBJECT	path_resolution.h	145;"	d
QTYPE_ALIAS	path_resolution.h	/^	QTYPE_ALIAS,		\/\/ where query aliases (bookmarks) are kept$/;"	e	enum:__anon5
QTYPE_ARCHIVE	path_resolution.h	/^	QTYPE_ARCHIVE,		\/\/ path pointing to objects on disk, begins with \/archive\/$/;"	e	enum:__anon5
QTYPE_MALFORMED	path_resolution.h	/^	QTYPE_MALFORMED,	\/\/ wrong path (not starting by \/tags, \/archive, \/stats or \/relations)$/;"	e	enum:__anon5
QTYPE_RELATIONS	path_resolution.h	/^	QTYPE_RELATIONS,	\/\/ path that's a relation between two or more tags, begins with \/relations\/$/;"	e	enum:__anon5
QTYPE_RETAG	path_resolution.h	/^	QTYPE_RETAG,		\/\/ experimental path used for object retagging$/;"	e	enum:__anon5
QTYPE_ROOT	path_resolution.h	/^	QTYPE_ROOT,			\/\/ no path, that's a special case for root directory$/;"	e	enum:__anon5
QTYPE_STATS	path_resolution.h	/^	QTYPE_STATS,		\/\/ path that's a special query for internal status, begins with \/stats\/$/;"	e	enum:__anon5
QTYPE_STORE	path_resolution.h	/^	QTYPE_STORE,		\/\/ where the files are tagged and accessed$/;"	e	enum:__anon5
QTYPE_TAGS	path_resolution.h	/^	QTYPE_TAGS,			\/\/ path that's a query, begins with \/tags\/$/;"	e	enum:__anon5
QTYPE_TOTAL	path_resolution.h	/^	QTYPE_TOTAL$/;"	e	enum:__anon5
REGISTER_CLEANUP	tagsistant.c	22;"	d	file:
RX1	sql.c	/^GRegex *RX1, *RX2, *RX3;$/;"	v
RX2	sql.c	/^GRegex *RX1, *RX2, *RX3;$/;"	v
RX3	sql.c	/^GRegex *RX1, *RX2, *RX3;$/;"	v
TAGSISTANT_ABORT_OPERATION	fuse_operations/operations.h	20;"	d
TAGSISTANT_ABORT_STORE_PARSING	path_resolution.c	421;"	d	file:
TAGSISTANT_ALIAS_IDENTIFIER	tagsistant.h	42;"	d
TAGSISTANT_ALIAS_MAX_LENGTH	tagsistant.h	93;"	d
TAGSISTANT_ANDSET_DELIMITER	tagsistant.h	45;"	d
TAGSISTANT_ANDSET_DELIMITER_CHAR	tagsistant.h	48;"	d
TAGSISTANT_ARCHIVE_DEPTH	tagsistant.h	96;"	d
TAGSISTANT_AUTOTAGGING_SEPARATOR	deduplication.c	28;"	d	file:
TAGSISTANT_BUILDNUMBER	buildnumber.h	1;"	d
TAGSISTANT_CODENAME	tagsistant.h	24;"	d
TAGSISTANT_COMMIT_TRANSACTION	sql.h	33;"	d
TAGSISTANT_CONTAINS	path_resolution.h	/^	TAGSISTANT_CONTAINS,$/;"	e	enum:__anon4
TAGSISTANT_CONTAINS_OPERATOR	path_resolution.h	39;"	d
TAGSISTANT_DBI_MYSQL_BACKEND	sql.h	30;"	d
TAGSISTANT_DBI_SQLITE_BACKEND	sql.h	31;"	d
TAGSISTANT_DEFAULT_TAGS_SUFFIX	tagsistant.h	102;"	d
TAGSISTANT_DEFAULT_TRIPLE_TAG_REGEX	tagsistant.h	99;"	d
TAGSISTANT_DONT_DO_AUTOTAGGING	deduplication.c	45;"	d	file:
TAGSISTANT_DONT_START_TRANSACTION	sql.h	41;"	d
TAGSISTANT_DO_AUTOTAGGING	deduplication.c	44;"	d	file:
TAGSISTANT_ENABLE_AND_SET_CACHE	tagsistant.h	72;"	d
TAGSISTANT_ENABLE_AUTOTAGGING	tagsistant.h	81;"	d
TAGSISTANT_ENABLE_FILE_HANDLE_CACHE	tagsistant.h	78;"	d
TAGSISTANT_ENABLE_FILE_HANDLE_CACHING	tagsistant.h	87;"	d
TAGSISTANT_ENABLE_QUERYTREE_CACHE	tagsistant.h	66;"	d
TAGSISTANT_ENABLE_REASONER_CACHE	tagsistant.h	75;"	d
TAGSISTANT_ENABLE_TAG_ID_CACHE	tagsistant.h	69;"	d
TAGSISTANT_EQUALS_TO_OPERATOR	path_resolution.h	38;"	d
TAGSISTANT_EQUAL_TO	path_resolution.h	/^	TAGSISTANT_EQUAL_TO,$/;"	e	enum:__anon4
TAGSISTANT_ERROR_CLOSE_TAG_GROUP_NOT_OPENED	path_resolution.h	426;"	d
TAGSISTANT_ERROR_DOUBLE_NEGATION	path_resolution.h	429;"	d
TAGSISTANT_ERROR_MALFORMED_QUERY	path_resolution.h	417;"	d
TAGSISTANT_ERROR_MEMORY_ALLOCATION	path_resolution.h	435;"	d
TAGSISTANT_ERROR_NEGATION_INSIDE_TAG_GROUP	path_resolution.h	432;"	d
TAGSISTANT_ERROR_NEGATION_ON_FIRST_POSITION	path_resolution.h	438;"	d
TAGSISTANT_ERROR_NESTED_TAG_GROUP	path_resolution.h	423;"	d
TAGSISTANT_ERROR_NULL_QUERY	path_resolution.h	420;"	d
TAGSISTANT_EXTRACTOR	tagsistant.h	174;"	d
TAGSISTANT_EXTRACTOR	tagsistant.h	176;"	d
TAGSISTANT_EXTRACTOR	tagsistant.h	178;"	d
TAGSISTANT_GREATER_THAN	path_resolution.h	/^	TAGSISTANT_GREATER_THAN,$/;"	e	enum:__anon4
TAGSISTANT_GREATER_THAN_OPERATOR	path_resolution.h	40;"	d
TAGSISTANT_INLINE_DEDUPLICATION	tagsistant.h	84;"	d
TAGSISTANT_INODE_DELIMITER	tagsistant.h	57;"	d
TAGSISTANT_IS_NOT_RELATED	path_resolution.c	916;"	d	file:
TAGSISTANT_IS_RELATED	path_resolution.c	915;"	d	file:
TAGSISTANT_MAX_KEYWORDS	plugin.h	33;"	d
TAGSISTANT_MAX_KEYWORD_LENGTH	plugin.h	34;"	d
TAGSISTANT_MIME_TYPE_FIELD_LENGTH	plugin.c	213;"	d	file:
TAGSISTANT_NEGATE_NEXT_TAG	tagsistant.h	51;"	d
TAGSISTANT_NEGATE_NEXT_TAG_CHAR	tagsistant.h	54;"	d
TAGSISTANT_NONE	path_resolution.h	/^	TAGSISTANT_NONE,$/;"	e	enum:__anon4
TAGSISTANT_NULL_BACKEND	sql.h	29;"	d
TAGSISTANT_PATH_IS_EXTERNAL	path_resolution.h	170;"	d
TAGSISTANT_PLUGIN_PREFIX	tagsistant.h	27;"	d
TAGSISTANT_QUERY_DELIMITER	tagsistant.h	30;"	d
TAGSISTANT_QUERY_DELIMITER_CHAR	tagsistant.h	33;"	d
TAGSISTANT_QUERY_DELIMITER_NO_REASONING	tagsistant.h	36;"	d
TAGSISTANT_QUERY_DELIMITER_NO_REASONING_CHAR	tagsistant.h	39;"	d
TAGSISTANT_REENTRANT_DBI	sql.h	24;"	d
TAGSISTANT_REENTRANT_DBI	sql.h	26;"	d
TAGSISTANT_RELATION_PATTERN	path_resolution.h	46;"	d
TAGSISTANT_ROLLBACK_TRANSACTION	sql.h	34;"	d
TAGSISTANT_RX_COMPILE_FLAGS	plugin.h	31;"	d
TAGSISTANT_SMALLER_THAN	path_resolution.h	/^	TAGSISTANT_SMALLER_THAN,$/;"	e	enum:__anon4
TAGSISTANT_SMALLER_THAN_OPERATOR	path_resolution.h	41;"	d
TAGSISTANT_SQL_BACKEND	sql.h	37;"	d
TAGSISTANT_START	tagsistant.h	283;"	d
TAGSISTANT_START	tagsistant.h	289;"	d
TAGSISTANT_START_TRANSACTION	sql.h	40;"	d
TAGSISTANT_STATS_BUFFER	tagsistant.h	90;"	d
TAGSISTANT_STOP_ERROR	tagsistant.h	285;"	d
TAGSISTANT_STOP_ERROR	tagsistant.h	291;"	d
TAGSISTANT_STOP_OK	tagsistant.h	284;"	d
TAGSISTANT_STOP_OK	tagsistant.h	290;"	d
TAGSISTANT_TAG_GROUP_ADD_NEW_NODE	path_resolution.c	412;"	d	file:
TAGSISTANT_TAG_GROUP_ADD_TO_NODE	path_resolution.c	415;"	d	file:
TAGSISTANT_TAG_GROUP_BEGIN	tagsistant.h	60;"	d
TAGSISTANT_TAG_GROUP_DONT_ADD	path_resolution.c	418;"	d	file:
TAGSISTANT_TAG_GROUP_END	tagsistant.h	63;"	d
TAGSISTANT_UNDEFINED_OPERATOR	path_resolution.h	/^	TAGSISTANT_UNDEFINED_OPERATOR$/;"	e	enum:__anon4
TAGSISTANT_USE_INTERNAL_TRANSACTIONS	sql.h	78;"	d
TAGSISTANT_USE_QUERY_MUTEX	sql.c	24;"	d	file:
TP_ERROR	plugin.h	25;"	d
TP_NULL	plugin.h	28;"	d
TP_OK	plugin.h	26;"	d
TP_STOP	plugin.h	27;"	d
VERSION	tagsistant.h	107;"	d
_DEBUG_FREE_CALLS_DEFINED	debug_free_calls.h	24;"	d
_DEBUG_STDERR	debug.h	28;"	d
_FILE_OFFSET_BITS	tagsistant.h	166;"	d
_FILE_OFFSET_BITS	tagsistant.h	167;"	d
_GNU_SOURCE	tagsistant.h	115;"	d
_PERMISSIONS	fuse_operations/getattr.c	69;"	d	file:
_POSIX_PTHREAD_SEMANTICS	tagsistant.h	131;"	d
_REENTRANT	tagsistant.h	130;"	d
_RELAXED_PERMISSIONS	fuse_operations/getattr.c	67;"	d	file:
_STRICT_PERMISSIONS	fuse_operations/getattr.c	68;"	d	file:
_XOPEN_SOURCE	tagsistant.h	121;"	d
_XOPEN_SOURCE	tagsistant.h	123;"	d
__NEXT_TOKEN	path_resolution.c	406;"	d	file:
__SLIDE_TOKEN	path_resolution.c	409;"	d	file:
__TOKEN	path_resolution.c	403;"	d	file:
_safe_string	sql.h	47;"	d
added_tags	path_resolution.h	/^	int added_tags;$/;"	m	struct:__anon7
address	debug_free_calls.h	/^	void *address;$/;"	m	struct:unfreeable
alias	path_resolution.h	/^	gchar *alias;$/;"	m	struct:querytree
and_set	path_resolution.h	/^	struct qtree_and_node *and_set;$/;"	m	struct:qtree_or_node	typeref:struct:qtree_or_node::qtree_and_node
archive	tagsistant.h	/^	gchar		*archive;		\/**< a directory holding all the files *\/$/;"	m	struct:tagsistant
archive_path	path_resolution.h	/^	gchar *archive_path;$/;"	m	struct:querytree
backend	sql.c	/^	int backend;$/;"	m	struct:__anon3	file:
backend_name	sql.c	/^	gchar *backend_name;$/;"	m	struct:__anon3	file:
buf	fuse_operations/readdir.c	/^	void *buf;						\/**< libfuse buffer to hold readdir results *\/$/;"	m	struct:tagsistant_use_filler_struct	file:
cleanup	tagsistant.c	/^void cleanup(int s)$/;"	f
complete	path_resolution.h	/^	int complete;$/;"	m	struct:querytree
conn	path_resolution.h	/^	dbi_conn conn;$/;"	m	struct:__anon7
connections	sql.c	/^int connections = 0;$/;"	v
current_keyword	plugin.c	/^	int current_keyword;$/;"	m	struct:__anon1	file:
current_node	path_resolution.h	/^	qtree_and_node *current_node;$/;"	m	struct:__anon7
db	sql.c	/^	gchar *db;$/;"	m	struct:__anon3	file:
dbg	debug.h	31;"	d
dbg	debug.h	34;"	d
dbg	tagsistant.h	/^	gchar 		dbg[128];		\/**< debug flags *\/$/;"	m	struct:tagsistant
dbi	path_resolution.h	/^	dbi_conn dbi;$/;"	m	struct:querytree
dbi_instance	tagsistant.h	/^	dbi_inst	dbi_instance;	\/**< libDBI instance for reentrant functions *\/$/;"	m	struct:tagsistant
dboptions	sql.c	/^} dboptions;$/;"	v	typeref:struct:__anon3
dboptions	tagsistant.h	/^	gchar		*dboptions;		\/**< database options for DBI *\/$/;"	m	struct:tagsistant
debug	tagsistant.h	/^	gboolean	debug;			\/**< debug profile *\/$/;"	m	struct:tagsistant
debug_flags	tagsistant.h	/^	gchar		*debug_flags;	\/**< debug flags as a string *\/$/;"	m	struct:tagsistant
debugfd	tagsistant.h	/^	FILE *debugfd;$/;"	m	struct:tagsistant
do_reasoning	path_resolution.h	/^	int do_reasoning;$/;"	m	struct:querytree
dont_tagsistant_and_node_match	reasoner.c	75;"	d	file:
dyn_strcat	tagsistant.h	188;"	d
elist	plugin.c	/^static EXTRACTOR_ExtractorList *elist;$/;"	v	file:
enable_xattr	tagsistant.h	/^	gboolean	enable_xattr;	\/**< enable extended attributes (needed for POSIX ACL) *\/$/;"	m	struct:tagsistant
errno	plugin.c	38;"	d	file:
error_message	path_resolution.h	/^	gchar *error_message;$/;"	m	struct:querytree
exists	path_resolution.h	/^	int exists;$/;"	m	struct:querytree
expanded_full_path	path_resolution.h	/^	gchar *expanded_full_path;$/;"	m	struct:querytree
filename	plugin.h	/^	char *filename;$/;"	m	struct:tagsistant_plugin
filler	fuse_operations/readdir.c	/^	fuse_fill_dir_t filler;			\/**< libfuse filler hook to return dir entries *\/$/;"	m	struct:tagsistant_use_filler_struct	file:
first_tag	path_resolution.h	/^	gchar *first_tag;$/;"	m	struct:querytree
force_inode_in_filenames	path_resolution.h	/^	int force_inode_in_filenames;$/;"	m	struct:querytree
foreground	tagsistant.h	/^	gboolean	foreground;		\/**< run in foreground *\/$/;"	m	struct:tagsistant
free	debug_free_calls.h	47;"	d
free	plugin.h	/^	void (*free)();$/;"	m	struct:tagsistant_plugin
freeblock	debug_free_calls.h	/^unfreeable_t *freeblock;$/;"	v
full_archive_path	path_resolution.h	/^	gchar *full_archive_path;$/;"	m	struct:querytree
full_path	path_resolution.h	/^	gchar *full_path;$/;"	m	struct:querytree
fuse_opts	tagsistant.h	/^	gchar **fuse_opts;$/;"	m	struct:tagsistant
g_free_null	tagsistant.h	263;"	d
generic_mime_type	plugin.c	/^	gchar generic_mime_type[TAGSISTANT_MIME_TYPE_FIELD_LENGTH];$/;"	m	struct:__anon1	file:
getline	utils.c	/^ssize_t getline(char **lineptr, size_t *n, FILE *stream)$/;"	f
handle	plugin.h	/^	void *handle;$/;"	m	struct:tagsistant_plugin
host	sql.c	/^	gchar *host;$/;"	m	struct:__anon3	file:
inode	path_resolution.h	/^	tagsistant_inode inode;		\/** object inode *\/$/;"	m	struct:__anon6
inode	path_resolution.h	/^	tagsistant_inode inode;$/;"	m	struct:querytree
is_alias	fuse_operations/readdir.c	/^	int is_alias;					\/**< set to 1 if entries are aliases and must be prefixed with the alias identifier (=) *\/$/;"	m	struct:tagsistant_use_filler_struct	file:
is_all_path	tagsistant.h	273;"	d
is_external	path_resolution.h	/^	int is_external;$/;"	m	struct:querytree
is_inside_tag_group	fuse_operations/readdir.c	/^int is_inside_tag_group(gchar *path)$/;"	f
is_taggable	path_resolution.h	/^	int is_taggable;$/;"	m	struct:querytree
key	path_resolution.h	/^	char *key;$/;"	m	struct:qtree_and_node
key	path_resolution.h	/^	gchar *key;$/;"	m	struct:querytree
key	reasoner.c	/^	gchar key[1024];$/;"	m	struct:__anon2	file:
keyword	plugin.h	/^	gchar keyword[TAGSISTANT_MAX_KEYWORD_LENGTH];$/;"	m	struct:__anon8
keywords	plugin.c	/^	tagsistant_keyword keywords[TAGSISTANT_MAX_KEYWORDS];$/;"	m	struct:__anon1	file:
last_access_microsecond	path_resolution.h	/^	GTimeSpan last_access_microsecond;$/;"	m	struct:querytree
last_tag	path_resolution.h	/^	gchar *last_tag;$/;"	m	struct:querytree
main	tagsistant.c	/^int main(int argc, char *argv[])$/;"	f
mime_type	plugin.c	/^	gchar mime_type[TAGSISTANT_MIME_TYPE_FIELD_LENGTH];$/;"	m	struct:__anon1	file:
mime_type	plugin.h	/^	char *mime_type;$/;"	m	struct:tagsistant_plugin
mountpoint	tagsistant.h	/^	gchar		*mountpoint;	\/**< no clue? *\/$/;"	m	struct:tagsistant
name	path_resolution.h	/^	char name[1024];			\/** object filename *\/$/;"	m	struct:__anon6
namespace	reasoner.c	/^	gchar namespace[1024];$/;"	m	struct:__anon2	file:
namespace_suffix	tagsistant.h	/^	gchar		*namespace_suffix; \/**< the suffix that distinguishes namespaces *\/$/;"	m	struct:tagsistant
negate	path_resolution.h	/^	int negate;$/;"	m	struct:__anon7
negate	path_resolution.h	/^	int negate;$/;"	m	struct:qtree_and_node
negate_next_tag	path_resolution.h	/^	int negate_next_tag;$/;"	m	struct:querytree
negated	path_resolution.h	/^	struct qtree_and_node *negated;$/;"	m	struct:qtree_and_node	typeref:struct:qtree_and_node::qtree_and_node
next	debug_free_calls.h	/^	struct unfreeable *next;$/;"	m	struct:unfreeable	typeref:struct:unfreeable::unfreeable
next	path_resolution.h	/^	struct qtree_and_node *next;$/;"	m	struct:qtree_and_node	typeref:struct:qtree_and_node::qtree_and_node
next	path_resolution.h	/^	struct qtree_or_node *next;$/;"	m	struct:qtree_or_node	typeref:struct:qtree_or_node::qtree_or_node
next	plugin.h	/^	struct tagsistant_plugin *next;$/;"	m	struct:tagsistant_plugin	typeref:struct:tagsistant_plugin::tagsistant_plugin
object_path	path_resolution.h	/^	gchar *object_path;$/;"	m	struct:querytree
open_debug_file	utils.c	/^void open_debug_file()$/;"	f
open_permission	tagsistant.h	/^	gboolean	open_permission;\/**< use relaxed permissions (777) on tags and other meta-directories *\/$/;"	m	struct:tagsistant
operator	path_resolution.h	/^	int    operator;$/;"	m	struct:querytree
operator	path_resolution.h	/^	int operator;$/;"	m	struct:qtree_and_node
password	sql.c	/^	gchar *password;$/;"	m	struct:__anon3	file:
path	fuse_operations/readdir.c	/^	const char *path;				\/**< the path that generates the query *\/$/;"	m	struct:tagsistant_use_filler_struct	file:
plist	plugin.c	/^static struct EXTRACTOR_PluginList *plist;$/;"	v	typeref:struct:EXTRACTOR_PluginList	file:
plugins	tagsistant.h	/^	tagsistant_plugin_t *plugins;$/;"	m	struct:tagsistant
points_to_object	path_resolution.h	/^	int points_to_object;$/;"	m	struct:querytree
processor	plugin.h	/^	int (*processor)(tagsistant_querytree *qtree, tagsistant_keyword keywords[TAGSISTANT_MAX_KEYWORDS]);$/;"	m	struct:tagsistant_plugin
progname	tagsistant.h	/^	gchar		*progname;		\/**< tagsistant *\/$/;"	m	struct:tagsistant
qtree	fuse_operations/readdir.c	/^	tagsistant_querytree *qtree;	\/**< the querytree that originated the readdir() *\/$/;"	m	struct:tagsistant_use_filler_struct	file:
qtree	plugin.c	/^	tagsistant_querytree *qtree;$/;"	m	struct:__anon1	file:
qtree_and_node	path_resolution.h	/^typedef struct qtree_and_node {$/;"	s
qtree_and_node	path_resolution.h	/^} qtree_and_node;$/;"	t	typeref:struct:qtree_and_node
qtree_and_node_destroy	path_resolution.c	1698;"	d	file:
qtree_or_node	path_resolution.h	/^typedef struct qtree_or_node {$/;"	s
qtree_or_node	path_resolution.h	/^} qtree_or_node;$/;"	t	typeref:struct:qtree_or_node
querytree	path_resolution.h	/^typedef struct querytree {$/;"	s
quiet	tagsistant.h	/^	gboolean	quiet;			\/**< don't log anything, even errors *\/$/;"	m	struct:tagsistant
readonly	tagsistant.h	/^	gboolean	readonly;		\/**< mount filesystem readonly *\/$/;"	m	struct:tagsistant
related	path_resolution.h	/^	struct qtree_and_node *related;$/;"	m	struct:qtree_and_node	typeref:struct:qtree_and_node::qtree_and_node
related_key	path_resolution.h	/^	gchar *related_key;$/;"	m	struct:querytree
related_namespace	path_resolution.h	/^	gchar *related_namespace;$/;"	m	struct:querytree
related_operator	path_resolution.h	/^	int    related_operator;$/;"	m	struct:querytree
related_value	path_resolution.h	/^	gchar *related_value;$/;"	m	struct:querytree
relation	path_resolution.h	/^	gchar *relation;$/;"	m	struct:querytree
remaining_opts	tagsistant.h	/^	gchar **remaining_opts;$/;"	m	struct:tagsistant
repository	tagsistant.h	/^	gchar		*repository;	\/**< it's where files and tags are archived, no? *\/$/;"	m	struct:tagsistant
schedule_for_unlink	path_resolution.h	/^	int schedule_for_unlink;$/;"	m	struct:querytree
second_tag	path_resolution.h	/^	gchar *second_tag;$/;"	m	struct:querytree
show_config	tagsistant.h	/^	gboolean	show_config;	\/**< show whole configuration *\/$/;"	m	struct:tagsistant
show_help	tagsistant.h	/^	gboolean	show_help;		\/**< show the help screen *\/$/;"	m	struct:tagsistant
show_version	tagsistant.h	/^	gboolean show_version;$/;"	m	struct:tagsistant
singlethread	tagsistant.h	/^	gboolean	singlethread;	\/**< single thread? *\/$/;"	m	struct:tagsistant
sql_backend_have_intersect	tagsistant.h	/^	int sql_backend_have_intersect;$/;"	m	struct:tagsistant
sql_database_driver	tagsistant.h	/^	int sql_database_driver;$/;"	m	struct:tagsistant
start_node	path_resolution.h	/^	qtree_and_node *start_node;$/;"	m	struct:__anon7
stats_path	path_resolution.h	/^	gchar *stats_path;$/;"	m	struct:querytree
strlen	debug.h	38;"	d
tag	path_resolution.h	/^	char *tag;$/;"	m	struct:qtree_and_node
tag	reasoner.c	/^	gchar tag[1024];$/;"	m	struct:__anon2	file:
tag_id	path_resolution.h	/^	tagsistant_tag_id tag_id;$/;"	m	struct:qtree_and_node
tag_id	reasoner.c	/^	tagsistant_tag_id tag_id;$/;"	m	struct:__anon2	file:
tags	tagsistant.h	/^	gchar		*tags;			\/**< a SQLite database on file *\/$/;"	m	struct:tagsistant
tags_suffix	tagsistant.h	/^	gchar		*tags_suffix;	\/**< the suffix to be added to filenames to list their tags *\/$/;"	m	struct:tagsistant
tagsistant	tagsistant.c	/^struct tagsistant tagsistant;$/;"	v	typeref:struct:tagsistant
tagsistant	tagsistant.h	/^struct tagsistant {$/;"	s
tagsistant_access	fuse_operations/access.c	/^int tagsistant_access(const char *path, int mode)$/;"	f
tagsistant_add_entry_to_dir	fuse_operations/readdir.c	/^static int tagsistant_add_entry_to_dir(void *filler_ptr, dbi_result result)$/;"	f	file:
tagsistant_add_reasoned_tag	reasoner.c	/^static int tagsistant_add_reasoned_tag(tagsistant_tag *T, tagsistant_reasoning *reasoning)$/;"	f	file:
tagsistant_add_reasoned_tag_callback	reasoner.c	/^static int tagsistant_add_reasoned_tag_callback(void *_reasoning, dbi_result result)$/;"	f	file:
tagsistant_add_to_fileset	fuse_operations/readdir.c	/^static int tagsistant_add_to_fileset(void *hash_table_pointer, dbi_result result)$/;"	f	file:
tagsistant_and_node_match	reasoner.c	/^int tagsistant_and_node_match(qtree_and_node *and, tagsistant_tag *T)$/;"	f
tagsistant_and_set_cache	path_resolution.c	/^GHashTable *tagsistant_and_set_cache = NULL;$/;"	v
tagsistant_and_set_cache_lock	path_resolution.c	/^GRWLock tagsistant_and_set_cache_lock;$/;"	v
tagsistant_autotagging_kernel	deduplication.c	/^gpointer tagsistant_autotagging_kernel(gpointer data)$/;"	f
tagsistant_autotagging_loop	deduplication.c	/^gpointer tagsistant_autotagging_loop(gpointer data) {$/;"	f
tagsistant_autotagging_queue	deduplication.c	/^GAsyncQueue *tagsistant_autotagging_queue;$/;"	v
tagsistant_check_single_tagging	path_resolution.c	/^int tagsistant_check_single_tagging(qtree_and_node *and, dbi_conn dbi, gchar *objectname)$/;"	f
tagsistant_chmod	fuse_operations/chmod.c	/^int tagsistant_chmod(const char *path, mode_t mode)$/;"	f
tagsistant_chown	fuse_operations/chown.c	/^int tagsistant_chown(const char *path, uid_t uid, gid_t gid)$/;"	f
tagsistant_commit_transaction	sql.h	81;"	d
tagsistant_commit_transaction	sql.h	84;"	d
tagsistant_compile_and_set	path_resolution.c	/^gchar *tagsistant_compile_and_set(gchar *objectname, qtree_and_node *and_set)$/;"	f
tagsistant_connection_pool	sql.c	/^GList *tagsistant_connection_pool = NULL;$/;"	v
tagsistant_connection_pool_lock	sql.c	/^GMutex tagsistant_connection_pool_lock;$/;"	v
tagsistant_create_and_tag_object	tagsistant.h	309;"	d
tagsistant_create_schema	sql.c	/^void tagsistant_create_schema()$/;"	f
tagsistant_db_connection	sql.c	/^dbi_conn *tagsistant_db_connection(int start_transaction)$/;"	f
tagsistant_db_connection_release	sql.c	/^void tagsistant_db_connection_release(dbi_conn dbi, gboolean is_writer_locked)$/;"	f
tagsistant_db_init	sql.c	/^void tagsistant_db_init()$/;"	f
tagsistant_deduplicate	deduplication.c	/^void tagsistant_deduplicate(gchar *path)$/;"	f
tagsistant_deduplication_init	deduplication.c	/^void tagsistant_deduplication_init()$/;"	f
tagsistant_deduplication_kernel	deduplication.c	/^gpointer tagsistant_deduplication_kernel(gpointer data)$/;"	f
tagsistant_deduplication_loop	deduplication.c	/^gpointer tagsistant_deduplication_loop(gpointer data) {$/;"	f
tagsistant_deduplication_queue	deduplication.c	/^GAsyncQueue *tagsistant_deduplication_queue;$/;"	v
tagsistant_destroy_reasoner_value	reasoner.c	/^void tagsistant_destroy_reasoner_value(gpointer data)$/;"	f
tagsistant_dirty_logging	debug.h	51;"	d
tagsistant_do_add_operators	fuse_operations/readdir.c	/^int tagsistant_do_add_operators(tagsistant_querytree *qtree)$/;"	f
tagsistant_driver_is_available	sql.c	/^int tagsistant_driver_is_available(const char *driver_name)$/;"	f
tagsistant_expand_path	path_resolution.c	/^gchar *tagsistant_expand_path(tagsistant_querytree *qtree)$/;"	f
tagsistant_expand_path_callback	path_resolution.c	/^gboolean  tagsistant_expand_path_callback($/;"	f
tagsistant_file_handle	path_resolution.h	/^} tagsistant_file_handle;$/;"	t	typeref:struct:__anon6
tagsistant_fileset_destroy_value_list	fuse_operations/readdir.c	/^void tagsistant_fileset_destroy_value_list(gchar *key, GList *list, gpointer data)$/;"	f
tagsistant_fileset_new	fuse_operations/readdir.c	/^GHashTable *tagsistant_fileset_new(qtree_or_node *query, dbi_conn conn, int is_all_path)$/;"	f
tagsistant_filetree_destroy_value	fuse_operations/readdir.c	36;"	d	file:
tagsistant_fix_archive	utils.c	/^void tagsistant_fix_archive()$/;"	f
tagsistant_fix_checksums	deduplication.c	/^void tagsistant_fix_checksums()$/;"	f
tagsistant_fix_checksums_callback	deduplication.c	/^int tagsistant_fix_checksums_callback(void *null_pointer, dbi_result result)$/;"	f
tagsistant_flush	fuse_operations/flush.c	/^int tagsistant_flush(const char *path, struct fuse_file_info *fi)$/;"	f
tagsistant_force_create_and_tag_object	tagsistant.h	310;"	d
tagsistant_fsync	tagsistant.c	/^static int tagsistant_fsync(const char *path, int isdatasync, struct fuse_file_info *fi)$/;"	f	file:
tagsistant_full_untag_object	sql.c	/^void tagsistant_full_untag_object(dbi_conn conn, tagsistant_inode inode)$/;"	f
tagsistant_fuse_main	tagsistant.c	/^int tagsistant_fuse_main($/;"	f
tagsistant_get_file_handle	tagsistant.h	344;"	d
tagsistant_get_file_handle	tagsistant.h	347;"	d
tagsistant_get_file_tags	utils.c	/^gchar *tagsistant_get_file_tags(tagsistant_querytree *qtree)$/;"	f
tagsistant_get_ini_entry	tagsistant.c	/^gchar *tagsistant_get_ini_entry(gchar *section, gchar *key) {$/;"	f
tagsistant_get_repository_ini_path	utils.c	246;"	d	file:
tagsistant_get_reversed_inode_tree	path_resolution.c	/^gchar *tagsistant_get_reversed_inode_tree(tagsistant_inode inode)$/;"	f
tagsistant_getattr	fuse_operations/getattr.c	/^int tagsistant_getattr(const char *path, struct stat *stbuf)$/;"	f
tagsistant_getxattr	fuse_operations/getxattr.c	/^int tagsistant_getxattr(const char *path, const char *name, char *value, size_t size)$/;"	f
tagsistant_guess_inode_from_and_set	path_resolution.c	/^tagsistant_inode tagsistant_guess_inode_from_and_set(qtree_and_node *and_set, dbi_conn dbi, gchar *objectname)$/;"	f
tagsistant_ini	utils.c	/^GKeyFile *tagsistant_ini = NULL;$/;"	v
tagsistant_init	tagsistant.c	/^static void *tagsistant_init(struct fuse_conn_info *conn)$/;"	f	file:
tagsistant_init	tagsistant.c	/^static void *tagsistant_init(void)$/;"	f	file:
tagsistant_init_syslog	utils.c	/^void tagsistant_init_syslog()$/;"	f
tagsistant_inner_create_and_tag_object	utils.c	/^int tagsistant_inner_create_and_tag_object(tagsistant_querytree *qtree, int *tagsistant_errno, int force_create)$/;"	f
tagsistant_inode	tagsistant.h	/^typedef uint32_t tagsistant_inode;$/;"	t
tagsistant_inode_extract_from_path	path_resolution.c	/^tagsistant_inode tagsistant_inode_extract_from_path(const gchar *path)$/;"	f
tagsistant_inode_extract_from_path_regex_1	path_resolution.c	/^GRegex *tagsistant_inode_extract_from_path_regex_1 = NULL;$/;"	v
tagsistant_inode_extract_from_path_regex_2	path_resolution.c	/^GRegex *tagsistant_inode_extract_from_path_regex_2 = NULL;$/;"	v
tagsistant_internal_open	fuse_operations/operations.h	48;"	d
tagsistant_invalidate_and_set_cache_entries	path_resolution.c	/^void tagsistant_invalidate_and_set_cache_entries(tagsistant_querytree *qtree)$/;"	f
tagsistant_invalidate_object_checksum	tagsistant.h	325;"	d
tagsistant_invalidate_querytree_cache	path_resolution.c	/^void tagsistant_invalidate_querytree_cache(tagsistant_querytree *qtree)$/;"	f
tagsistant_invalidate_querytree_entry	path_resolution.c	/^gboolean tagsistant_invalidate_querytree_entry(gpointer key_p, gpointer entry_p, gpointer qtree_p)$/;"	f
tagsistant_invalidate_reasoning_cache	reasoner.c	/^void tagsistant_invalidate_reasoning_cache(gchar *tag)$/;"	f
tagsistant_is_tags_list_file	utils.c	/^gboolean tagsistant_is_tags_list_file(tagsistant_querytree *qtree)$/;"	f
tagsistant_keyword	plugin.h	/^} tagsistant_keyword;$/;"	t	typeref:struct:__anon8
tagsistant_keyword_matcher	plugin.c	/^void tagsistant_keyword_matcher($/;"	f
tagsistant_last_insert_id	sql.c	/^tagsistant_inode tagsistant_last_insert_id(dbi_conn conn)$/;"	f
tagsistant_link	fuse_operations/link.c	/^int tagsistant_link(const char *from, const char *to)$/;"	f
tagsistant_listxattr	fuse_operations/listxattr.c	/^int tagsistant_listxattr(const char *path, char *list, size_t size)$/;"	f
tagsistant_make_tag_key	sql.h	118;"	d
tagsistant_manage_repository_ini	utils.c	/^void tagsistant_manage_repository_ini()$/;"	f
tagsistant_mkdir	fuse_operations/mkdir.c	/^int tagsistant_mkdir(const char *path, mode_t mode)$/;"	f
tagsistant_mknod	fuse_operations/mknod.c	/^int tagsistant_mknod(const char *path, mode_t mode, dev_t rdev)$/;"	f
tagsistant_object_is_tagged	sql.c	/^int tagsistant_object_is_tagged(dbi_conn conn, tagsistant_inode inode)$/;"	f
tagsistant_object_is_tagged_as	sql.c	/^int tagsistant_object_is_tagged_as(dbi_conn conn, tagsistant_inode inode, tagsistant_inode tag_id)$/;"	f
tagsistant_open	fuse_operations/open.c	/^int tagsistant_open(const char *path, struct fuse_file_info *fi)$/;"	f
tagsistant_oper	tagsistant.c	/^static struct fuse_operations tagsistant_oper = {$/;"	v	typeref:struct:fuse_operations	file:
tagsistant_options	tagsistant.c	/^static GOptionEntry tagsistant_options[] =$/;"	v	file:
tagsistant_parse_repository_ini	utils.c	/^GKeyFile *tagsistant_parse_repository_ini()$/;"	f
tagsistant_path_resolution_init	path_resolution.c	/^void tagsistant_path_resolution_init()$/;"	f
tagsistant_plugin	plugin.h	/^typedef struct tagsistant_plugin {$/;"	s
tagsistant_plugin_apply_regex	plugin.c	/^void tagsistant_plugin_apply_regex(const tagsistant_querytree *qtree, const char *buf, GMutex *m, GRegex *rx)$/;"	f
tagsistant_plugin_get_keyword_value	plugin.c	/^const gchar *tagsistant_plugin_get_keyword_value(gchar *keyword, tagsistant_keyword keywords[TAGSISTANT_MAX_KEYWORDS])$/;"	f
tagsistant_plugin_iterator	plugin.c	/^void tagsistant_plugin_iterator($/;"	f
tagsistant_plugin_loader	plugin.c	/^void tagsistant_plugin_loader()$/;"	f
tagsistant_plugin_t	plugin.h	/^} tagsistant_plugin_t;$/;"	t	typeref:struct:tagsistant_plugin
tagsistant_plugin_tag_by_date	plugin.c	/^void tagsistant_plugin_tag_by_date(const tagsistant_querytree *qtree, const gchar *date)$/;"	f
tagsistant_plugin_unloader	plugin.c	/^void tagsistant_plugin_unloader()$/;"	f
tagsistant_process	plugin.c	/^int tagsistant_process(gchar *path, gchar *full_archive_path)$/;"	f
tagsistant_process_callback	plugin.c	/^static int tagsistant_process_callback($/;"	f	file:
tagsistant_process_callback_context	plugin.c	/^} tagsistant_process_callback_context;$/;"	t	typeref:struct:__anon1	file:
tagsistant_processor_mutex	plugin.c	/^GMutex tagsistant_processor_mutex;$/;"	v
tagsistant_qtree_list_tags_in_last_or_node	fuse_operations/readdir.c	/^gchar *tagsistant_qtree_list_tags_in_last_or_node(tagsistant_querytree *qtree)$/;"	f
tagsistant_query	sql.h	50;"	d
tagsistant_query_add_and_set	fuse_operations/readdir.c	/^void tagsistant_query_add_and_set(GString *statement, qtree_and_node *and_set)$/;"	f
tagsistant_query_mutex	sql.c	/^GMutex tagsistant_query_mutex;$/;"	v
tagsistant_query_operators	path_resolution.h	/^} tagsistant_query_operators;$/;"	v	typeref:enum:__anon4
tagsistant_query_rwlock	sql.c	/^GRWLock tagsistant_query_rwlock;$/;"	v
tagsistant_query_type	path_resolution.h	/^} tagsistant_query_type;$/;"	t	typeref:enum:__anon5
tagsistant_querytree	path_resolution.h	/^} tagsistant_querytree;$/;"	t	typeref:struct:querytree
tagsistant_querytree_cache	path_resolution.c	/^GHashTable *tagsistant_querytree_cache = NULL;$/;"	v
tagsistant_querytree_cache_counter	path_resolution.c	/^void tagsistant_querytree_cache_counter(gpointer key, gpointer value, gpointer user_data)$/;"	f
tagsistant_querytree_cache_destroy_element	path_resolution.c	/^void tagsistant_querytree_cache_destroy_element(tagsistant_querytree *qtree)$/;"	f
tagsistant_querytree_cache_lock	path_resolution.c	/^GRWLock tagsistant_querytree_cache_lock;$/;"	v
tagsistant_querytree_cache_total	path_resolution.c	/^int tagsistant_querytree_cache_total()$/;"	f
tagsistant_querytree_check_tagging_consistency	path_resolution.c	/^int tagsistant_querytree_check_tagging_consistency(tagsistant_querytree *qtree)$/;"	f
tagsistant_querytree_destroy	path_resolution.c	/^void tagsistant_querytree_destroy(tagsistant_querytree *qtree, guint commit_transaction)$/;"	f
tagsistant_querytree_duplicate	path_resolution.c	/^tagsistant_querytree *tagsistant_querytree_duplicate(tagsistant_querytree *qtree)$/;"	f
tagsistant_querytree_duplicate_qtree_and_node	path_resolution.c	/^qtree_and_node *tagsistant_querytree_duplicate_qtree_and_node(qtree_and_node *origin)$/;"	f
tagsistant_querytree_duplicate_qtree_or_node	path_resolution.c	/^qtree_or_node *tagsistant_querytree_duplicate_qtree_or_node(qtree_or_node *origin)$/;"	f
tagsistant_querytree_find_duplicates	deduplication.c	/^int tagsistant_querytree_find_duplicates(tagsistant_querytree *qtree, gchar *hex)$/;"	f
tagsistant_querytree_lookup	path_resolution.c	/^tagsistant_querytree *tagsistant_querytree_lookup(const char *path)$/;"	f
tagsistant_querytree_new	path_resolution.c	/^tagsistant_querytree *tagsistant_querytree_new($/;"	f
tagsistant_querytree_parse_alias	path_resolution.c	/^int tagsistant_querytree_parse_alias($/;"	f
tagsistant_querytree_parse_archive	path_resolution.c	/^int tagsistant_querytree_parse_archive($/;"	f
tagsistant_querytree_parse_relations	path_resolution.c	/^int tagsistant_querytree_parse_relations ($/;"	f
tagsistant_querytree_parse_relations_consume_triple	path_resolution.c	/^void tagsistant_querytree_parse_relations_consume_triple ($/;"	f
tagsistant_querytree_parse_stats	path_resolution.c	/^int tagsistant_querytree_parse_stats ($/;"	f
tagsistant_querytree_parse_store	path_resolution.c	/^int tagsistant_querytree_parse_store ($/;"	f
tagsistant_querytree_parse_tags	path_resolution.c	/^int tagsistant_querytree_parse_tags ($/;"	f
tagsistant_querytree_rebuild_paths	path_resolution.c	/^void tagsistant_querytree_rebuild_paths(tagsistant_querytree *qtree)$/;"	f
tagsistant_querytree_set_inode	path_resolution.c	/^void tagsistant_querytree_set_inode(tagsistant_querytree *qtree, tagsistant_inode inode)$/;"	f
tagsistant_querytree_set_object_path	path_resolution.c	/^void tagsistant_querytree_set_object_path(tagsistant_querytree *qtree, char *new_object_path)$/;"	f
tagsistant_querytree_traverse	path_resolution.c	/^extern void tagsistant_querytree_traverse($/;"	f
tagsistant_querytree_traverser	path_resolution.h	/^typedef void (*tagsistant_querytree_traverser)($/;"	t
tagsistant_querytree_type	path_resolution.h	122;"	d
tagsistant_querytree_types	path_resolution.c	/^gchar *tagsistant_querytree_types[QTYPE_TOTAL];$/;"	v
tagsistant_read	fuse_operations/read.c	/^int tagsistant_read(const char *path, char *buf, size_t size, off_t offset, struct fuse_file_info *fi)$/;"	f
tagsistant_read_file_tags	utils.c	/^int tagsistant_read_file_tags(void *tagsbuffer, dbi_result result)$/;"	f
tagsistant_read_stats_configuration	fuse_operations/read.c	/^void tagsistant_read_stats_configuration(gchar stats_buffer[TAGSISTANT_STATS_BUFFER])$/;"	f
tagsistant_readdir	fuse_operations/readdir.c	/^int tagsistant_readdir(const char *path, void *buf, fuse_fill_dir_t filler, off_t offset, struct fuse_file_info *fi)$/;"	f
tagsistant_readdir_on_alias	fuse_operations/readdir.c	/^int tagsistant_readdir_on_alias($/;"	f
tagsistant_readdir_on_object	fuse_operations/readdir.c	/^int tagsistant_readdir_on_object($/;"	f
tagsistant_readdir_on_relations	fuse_operations/readdir.c	/^int tagsistant_readdir_on_relations($/;"	f
tagsistant_readdir_on_stats	fuse_operations/readdir.c	/^int tagsistant_readdir_on_stats($/;"	f
tagsistant_readdir_on_store	fuse_operations/readdir.c	/^int tagsistant_readdir_on_store($/;"	f
tagsistant_readdir_on_store_filler	fuse_operations/readdir.c	/^static int tagsistant_readdir_on_store_filler(gchar *name, GList *fh_list, struct tagsistant_use_filler_struct *ufs)$/;"	f	file:
tagsistant_readdir_on_tags	fuse_operations/readdir.c	/^int tagsistant_readdir_on_tags($/;"	f
tagsistant_readlink	fuse_operations/readlink.c	/^int tagsistant_readlink(const char *path, char *buf, size_t size)$/;"	f
tagsistant_real_query	sql.c	/^int tagsistant_real_query($/;"	f
tagsistant_reasoner	path_resolution.h	410;"	d
tagsistant_reasoner_cache	reasoner.c	/^static GHashTable *tagsistant_reasoner_cache;$/;"	v	file:
tagsistant_reasoner_init	reasoner.c	/^void tagsistant_reasoner_init()$/;"	f
tagsistant_reasoner_inner	reasoner.c	/^int tagsistant_reasoner_inner(tagsistant_reasoning *reasoning, int do_caching)$/;"	f
tagsistant_reasoning	path_resolution.h	/^} tagsistant_reasoning;$/;"	t	typeref:struct:__anon7
tagsistant_release	fuse_operations/release.c	/^int tagsistant_release(const char *path, struct fuse_file_info *fi)$/;"	f
tagsistant_remove_tag_from_cache	sql.c	/^void tagsistant_remove_tag_from_cache(const gchar *tagname, const gchar *key, const gchar *value)$/;"	f
tagsistant_removexattr	fuse_operations/removexattr.c	/^int tagsistant_removexattr(const char *path, const char *name)$/;"	f
tagsistant_rename	fuse_operations/rename.c	/^int tagsistant_rename(const char *from, const char *to)$/;"	f
tagsistant_return_integer	sql.c	/^int tagsistant_return_integer(void *return_integer, dbi_result result)$/;"	f
tagsistant_return_string	sql.c	/^int tagsistant_return_string(void *return_string, dbi_result result)$/;"	f
tagsistant_rmdir	fuse_operations/rmdir.c	/^int tagsistant_rmdir(const char *path)$/;"	f
tagsistant_rollback_transaction	sql.h	82;"	d
tagsistant_rollback_transaction	sql.h	85;"	d
tagsistant_run_processor	plugin.c	/^int tagsistant_run_processor($/;"	f
tagsistant_rx_cleaner	plugin.c	/^static GRegex *tagsistant_rx_cleaner;$/;"	v	file:
tagsistant_rx_date	plugin.c	/^static GRegex *tagsistant_rx_date;$/;"	v	file:
tagsistant_save_repository_ini	utils.c	/^void tagsistant_save_repository_ini(GKeyFile *kf)$/;"	f
tagsistant_set_file_handle	tagsistant.h	343;"	d
tagsistant_set_file_handle	tagsistant.h	346;"	d
tagsistant_set_init_default	utils.c	298;"	d	file:
tagsistant_setxattr	fuse_operations/setxattr.c	/^int tagsistant_setxattr(const char *path, const char *name, const char *value, size_t size, int flags)$/;"	f
tagsistant_show_config	utils.c	/^void tagsistant_show_config()$/;"	f
tagsistant_sql_alias_create	sql.c	/^void tagsistant_sql_alias_create(dbi_conn conn, const gchar *alias)$/;"	f
tagsistant_sql_alias_delete	sql.c	/^void tagsistant_sql_alias_delete(dbi_conn conn, const gchar *alias)$/;"	f
tagsistant_sql_alias_exists	sql.c	/^int tagsistant_sql_alias_exists(dbi_conn conn, const gchar *alias)$/;"	f
tagsistant_sql_alias_get	sql.c	/^gchar *tagsistant_sql_alias_get(dbi_conn conn, const gchar *alias)$/;"	f
tagsistant_sql_alias_get_length	sql.c	/^size_t tagsistant_sql_alias_get_length(dbi_conn conn, const gchar *alias)$/;"	f
tagsistant_sql_alias_set	sql.c	/^void tagsistant_sql_alias_set(dbi_conn conn, const gchar *alias, const gchar *query)$/;"	f
tagsistant_sql_create_tag	sql.c	/^void tagsistant_sql_create_tag(dbi_conn conn, const gchar *namespace, const gchar *key, const gchar *value)$/;"	f
tagsistant_sql_delete_tag	sql.c	/^void tagsistant_sql_delete_tag(dbi_conn conn, const gchar *tagname, const gchar *key, const gchar *value)$/;"	f
tagsistant_sql_delete_tag_proxy	fuse_operations/rmdir.c	/^void tagsistant_sql_delete_tag_proxy($/;"	f
tagsistant_sql_get_tag_id	sql.c	/^tagsistant_inode tagsistant_sql_get_tag_id(dbi_conn conn, const gchar *tagname, const gchar *key, const gchar *value)$/;"	f
tagsistant_sql_rename_tag	sql.c	/^void tagsistant_sql_rename_tag(dbi_conn conn, const gchar *tagname, const gchar *oldtagname)$/;"	f
tagsistant_sql_tag_object	sql.c	/^void tagsistant_sql_tag_object($/;"	f
tagsistant_sql_untag_object	sql.c	/^void tagsistant_sql_untag_object(dbi_conn conn, const gchar *tagname, const gchar *key, const gchar *value, tagsistant_inode inode)$/;"	f
tagsistant_statfs	fuse_operations/statfs.c	/^int tagsistant_statfs(const char *path, struct statfs *stbuf)$/;"	f
tagsistant_statvfs	fuse_operations/statvfs.c	/^int tagsistant_statvfs(const char *path, struct statvfs *stbuf)$/;"	f
tagsistant_string_tags_list_suffix	utils.c	/^gchar *tagsistant_string_tags_list_suffix(tagsistant_querytree *qtree)$/;"	f
tagsistant_symlink	fuse_operations/symlink.c	/^int tagsistant_symlink(const char *from, const char *to)$/;"	f
tagsistant_tag	reasoner.c	/^} tagsistant_tag;$/;"	t	typeref:struct:__anon2	file:
tagsistant_tag_cache	sql.c	/^GHashTable *tagsistant_tag_cache = NULL;$/;"	v
tagsistant_tag_id	tagsistant.h	/^typedef uint32_t tagsistant_tag_id;$/;"	t
tagsistant_tags_list_mutex	utils.c	/^GMutex tagsistant_tags_list_mutex;$/;"	v
tagsistant_tags_list_removal_rx	utils.c	/^GRegex *tagsistant_tags_list_removal_rx = NULL;$/;"	v
tagsistant_tags_list_rx	utils.c	/^GRegex *tagsistant_tags_list_rx = NULL;$/;"	v
tagsistant_truncate	fuse_operations/truncate.c	/^int tagsistant_truncate(const char *path, off_t size)$/;"	f
tagsistant_unlink	fuse_operations/unlink.c	/^int tagsistant_unlink(const char *path)$/;"	f
tagsistant_usage	tagsistant.c	/^void tagsistant_usage(gchar *progname, int verbose)$/;"	f
tagsistant_use_filler_struct	fuse_operations/readdir.c	/^struct tagsistant_use_filler_struct {$/;"	s	file:
tagsistant_utils_init	utils.c	/^void tagsistant_utils_init()$/;"	f
tagsistant_utime	fuse_operations/utime.c	/^int tagsistant_utime(const char *path, struct utimbuf *buf)$/;"	f
tagsistant_valid_relation	fuse_operations/getattr.c	/^int tagsistant_valid_relation(tagsistant_querytree *qtree, tagsistant_inode tag_id, tagsistant_inode related_tag_id)$/;"	f
tagsistant_write	fuse_operations/write.c	/^int tagsistant_write(const char *path, const char *buf, size_t size, off_t offset, struct fuse_file_info *fi)$/;"	f
transaction_started	path_resolution.h	/^	int transaction_started;$/;"	m	struct:querytree
tree	path_resolution.h	/^	qtree_or_node *tree;$/;"	m	struct:querytree
triple_tag_regex	tagsistant.h	/^	gchar		*triple_tag_regex; \/**< namespace suffix detector regexp *\/$/;"	m	struct:tagsistant
type	path_resolution.h	/^	int type;$/;"	m	struct:querytree
unfreeable	debug_free_calls.h	/^typedef struct unfreeable {$/;"	s
unfreeable	debug_free_calls.h	33;"	d
unfreeable	debug_free_calls.h	64;"	d
unfreeable_t	debug_free_calls.h	/^} unfreeable_t;$/;"	t	typeref:struct:unfreeable
usage_already_printed	tagsistant.c	/^int usage_already_printed = 0;$/;"	v
username	sql.c	/^	gchar *username;$/;"	m	struct:__anon3	file:
valid	path_resolution.h	/^	int valid;$/;"	m	struct:querytree
value	path_resolution.h	/^	char *value;$/;"	m	struct:qtree_and_node
value	path_resolution.h	/^	gchar *value;$/;"	m	struct:querytree
value	plugin.h	/^	gchar value[TAGSISTANT_MAX_KEYWORD_LENGTH];$/;"	m	struct:__anon8
value	reasoner.c	/^	gchar value[1024];$/;"	m	struct:__anon2	file:
verbose	tagsistant.h	/^	gboolean	verbose;		\/**< do verbose logging on syslog (stderr is always verbose) *\/$/;"	m	struct:tagsistant
